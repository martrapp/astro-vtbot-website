---
import MdxLayout from './MdxLayout.astro';
import AnimationStyle from 'astro-vtbot/animations/AnimationStyle.astro';
import NoScroll from 'astro-vtbot/components/NoScroll.astro';
import { Code } from 'astro-expressive-code/components'
import { createAnimationScope, fade, slide } from 'astro:transitions';
import { swing, customSwing } from 'astro-vtbot/animations/swing';
import { zoom, customZoom } from 'astro-vtbot/animations/zoom';
import { move, customMove } from 'astro-vtbot/animations/move';
import { extend, styleSheet } from 'astro-vtbot/animations/animation-style';
import Swing1 from '../mdx/animations/swing1.mdx';
import Swing2 from '../mdx/animations/swing2.mdx';
import Swing3 from '../mdx/animations/swing3.mdx';
import Zoom1 from '../mdx/animations/zoom1.mdx';
import Zoom2 from '../mdx/animations/zoom2.mdx';
import Zoom3 from '../mdx/animations/zoom3.mdx';
import Move1 from '../mdx/animations/move1.mdx';
import Move2 from '../mdx/animations/move2.mdx';
import Move3 from '../mdx/animations/move3.mdx';

const { scope: zoom1Scope, styles: zoom1Styles } = styleSheet({
	transitionName: 'zoom1',
	animations: extend(zoom({ duration: '0.3s' })),
	scope: undefined,
});

const zoom2Scope = customZoom('zoom2', {
	keyframes: { scale: { forwardOut: 0, backwardIn: 0 } },
});

const zoom3Scope = customZoom('zoom3', {
	keyframes: { scale: { forwardOut: 0, backwardIn: 0 } },
	base: { duration: '0.3s', easing: 'cubic-bezier(.16,.73,.05,1.52)' },
	extensions: {
		forwards: { new: { 'animation-delay': '0.2s' } },
		backwards: { new: { 'animation-delay': '0.2s' } },
	},
});

const swing1Scope = customSwing('swing1', {
	keyframes: { axis: { y: 1 }, angle: { leave: '90deg', enter: '-90deg' } },
	base: { duration: '300ms' },
	extensions: {
		forwards: {
			old: { 'transform-origin': 'center left' },
			new: { 'transform-origin': 'center right', 'animation-delay': '0.075s' },
		},
		backwards: {
			old: { 'transform-origin': 'center right' },
			new: { 'transform-origin': 'center left', 'animation-delay': '0.075s' },
		},
	},
});

const swing2Scope = customSwing('swing2', {
	keyframes: {
		axis: { z: 1 },
		angle: { leave: '180deg', enter: '-180deg' },
	},
	base: { duration: '0.3s' },
	extensions: {
		forwards: { new: { 'animation-delay': '0.15s' } },
		backwards: { new: { 'animation-delay': '0.15s' } },
	},
});

const swing3Scope = customSwing('swing3', {
	keyframes: { axis: { x: 1 } },
	base: { duration: '0.3s' },
	extensions: {
		forwards: {
			old: { 'transform-origin': 'top center' },
			new: { 'transform-origin': 'top center', 'animation-delay': '0.1s' },
		},
		backwards: {
			old: { 'transform-origin': 'top center' },
			new: { 'transform-origin': 'top center', 'animation-delay': '0.1s' },
		},
	},
});

const { scope: move1Scope, styles: move1Styles } = styleSheet({
	transitionName: 'move1',
	animations: extend(move({ duration: '0.3s' })),
	scope: undefined,
});

const move2Scope = customMove('move2', {
	keyframes: {
		enter: { x: '100vw'},
		leave: { x: '-100vw'},
	},
	base: { duration: '0.5s', easing: 'linear' },
});

const move3Scope = customMove('move3', {
	keyframes: {
		enter: { y: '-50cm', z: '-50cm' },
		enterMid: { y: '10cm', z: '-25cm', angel: '10deg' },
		leaveMid: { y: '-10cm', z: '-25cm', angel: '-10deg' },
		leave: { y: '50cm', z: '50cm' },
		axis: { x: 1, y: 1, z: 1 },
	},
	base: { duration: '0.5s', easing: 'ease-in-out' },
});


const { scope: _noneScope, styles: noneStyles } = styleSheet({
	transitionName: 'none',
	animations: {},
	scope: undefined,
});
const { scope: _fadeScope, styles: fadeStyles } = styleSheet({
	transitionName: 'fade',
	animations: extend(fade({ duration: 300 })),
	scope: undefined,
});
const { scope: _slideScope, styles: slideStyles } = createAnimationScope('slide', { ...slide() });
---

<AnimationStyle name="swing1" />
<AnimationStyle name="swing2" />
<AnimationStyle name="swing3" />
<AnimationStyle name="zoom2" />
<AnimationStyle name="zoom3" />
<AnimationStyle name="move2" />
<AnimationStyle name="move3" />

<style set:text={noneStyles + fadeStyles + slideStyles + zoom1Styles + move1Styles}></style>

<MdxLayout {...Astro.props}>
	<NoScroll slot="head" />
	<meta
		name="vtbot-linter-ignore"
		content="none fade slide zoom1 zoom2 zoom3 swing1 swing2 swing3 move1 move2 move3"
		slot="head"
	/>
	<span id="saver" data-animation="zoom1" transition:persist="saver"></span>
	<div class="button-grid" id="buttonGrid" transition:name="grid" transition:animate={swing()}>
		<button data-scope={zoom1Scope}>zoom1</button>
		<button data-scope={zoom2Scope}>zoom2</button>
		<button data-scope={zoom3Scope}>zoom3</button>
		<button data-scope={swing1Scope}>swing1</button>
		<button data-scope={swing2Scope}>swing2</button>
		<button data-scope={swing3Scope}>swing3</button>
		<button data-scope={move1Scope}>move1</button>
		<button data-scope={move2Scope}>move2</button>
		<button data-scope={move3Scope}>move3</button>
		{
			/*	<button data-scope={noneScope}>none</button>
		<button data-scope={fadeScope}>fade</button>
		<button data-scope={slideScope}>slide</button>
	*/
		}
	</div>
	<p style="font-size:1.4rem; color: var(--vtbot-accent)">
		Use the buttons above to select an animation style. Then press the link in the demo web site
		below to see that animation in action. <a href="#done">How do you do that?</a>
	</p>
	<div style="perspective: 50cm">
		<div id="demo"><a href="./#">Flip</a><slot /><br style="clear:both" /></div>
	</div>
	<hr id="done" />
	<h2>How were these animations crafted?</h2><p>
		All animations are made with <a data-astro-reload href="../../library/Zoom/">Zoom</a>, <a
			data-astro-reload
			href="../../library/Swing/">Swing</a
		> and
		<a data-astro-reload href="../../library/Move/">Move</a> from the <a data-astro-reload href="/"
			><code>astro-vtbot</code></a
		> package. In the code examples below you can see how they are parametrized.
	</p><p>
		By the way: The animation of the button grid at the top of this page was created by simply
		adding <code>swing()</code> to <code>transition:animate</code>.
	</p>
	<Code lang="astro" code=`
---
import { swing } from "astro-vtbot/animations/swing";
---
<div transition:animate={swing()}>...
`/>
<hr />
<p>Here are the codes for the other examples:</p>

	<h3>Zoom</h3>
	<Zoom1 /><hr />
	<Zoom2 /><hr />
	<Zoom3 /><hr />
	<h3>Swing</h3>
	<Swing1 /><hr />
	<Swing2 /><hr />
	<Swing3 /><hr />
	<h3>Move</h3>
	<Move1 /><hr />
	<Move2 /><hr />
	<Move3 /><hr />
</MdxLayout>

<script>
	document.addEventListener('astro:after-swap', afterSwap);
	function afterSwap() {
		const saver = document.getElementById('saver');
		if (!location.pathname.match(/\/animations\//) || !saver) return;
		const buttonGrid = document.getElementById('buttonGrid')!;
		const buttons = buttonGrid.getElementsByTagName('button');
		const demo = document.querySelector('#demo') as HTMLElement;

		demo.dataset.astroTransitionScope = saver.dataset.scope ?? buttons[0]!.dataset.scope;
		for (let i = 0; i < buttons.length; i++) {
			if (buttons[i]!.innerText === saver.dataset.animation) {
				buttons[i]!.classList.add('selected');
				demo.dataset.astroTransitionScope = buttons[i]!.dataset.scope;
			}
			buttons[i]!.addEventListener('click', click);
		}

		function click(ev: MouseEvent) {
			for (let j = 0; j < buttons.length; j++) {
				buttons[j]!.classList.remove('selected');
			}
			const that = ev.target as HTMLButtonElement;
			that?.classList.add('selected');
			demo.dataset.astroTransitionScope = that.dataset.scope;
			saver!.dataset.animation = that.innerText;
		}
	}
	afterSwap();
</script>
<style>
	#demo {
		background: var(--vtbot-gradbg);
		padding: 4ex;
		border: 1px dotted var(--vtbot-accent);
	}

	.button-grid {
		display: grid;
		grid-template-columns: repeat(3, 1fr);
		gap: 10px;
		background: var(--vtbot-gradbg);
	}

	.button-grid button {
		padding: 10px;
		font-size: 16px;
		color: var(--vtbot-color);
		background: var(--vtbot-table-background);
		border: dotted 1px var(--vtbot-color);
	}

	.button-grid button.selected {
		color: var(--vtbot-accent);
		background: var(--vtbot-gradbg);
		border: solid 2px var(--vtbot-accent);
	}
</style>
<style is:global>
	a {
		color: var(--vtbot-global-accent);
	}
	img {
		background-color: #808080;
		padding: 0.2ex;
		margin: 1ex;
	}
	::view-transition-old(root),
	::view-transition-new(root) {
		animation: none;
	}
	::view-transition-group(*) {
		animation: none;
	}
</style>
