---
import VtbotPanel from './VtbotPanel.astro';
---

<template id="vtbot-ui-panel-template">
	<VtbotPanel />
</template>

<script>
	import {
		TRANSITION_AFTER_PREPARATION,
		TRANSITION_BEFORE_SWAP,
		type TransitionBeforeSwapEvent,
	} from 'astro:transitions/client';
	import { deriveCSSSelector } from 'node_modules/astro-vtbot/components/derive-css-selector';
	import { elementsWithStyleProperty } from 'node_modules/astro-vtbot/components/css';


	function genInitCode() {
		return `
		import { deriveCSSSelector } from '/node_modules/astro-vtbot/components/derive-css-selector';

		document.addEventListener('click', (e) => {
			e.preventDefault();
			const target = e.target.closest('[data-vtbot-transition-name]');
			if (target) {
				const name = target.dataset.vtbotTransitionName;
				window.parent.postMessage({type:'click', name},'${location.origin}');
			}
		},{capture:true});

		window.addEventListener('message', (e) => {
			e.target.document.querySelectorAll("[data-vtbot-transition-name]").forEach(el => el.classList.remove('selected'));
			if (e.data.type === 'click') {
				const targets = e.target.document.querySelectorAll("[data-vtbot-transition-name='" + e.data.name + "']");
				targets.forEach((target) => target.classList.add('selected'))
			}
		});`;
	}

	function genScrollCode() {
		let scrollCode = `
		function scroll(sel, val) {
			const el = document.querySelector(sel);
			el && el.scrollTo({behavior:'instant', top:val});
		}
		`;
		document.querySelectorAll('*').forEach((el: Element) => {
			if (el.scrollTop > 0) {
				scrollCode += `scroll("${deriveCSSSelector(el)}", ${el.scrollTop});`;
			}
		});
		return scrollCode;
	}

	function markTransitions() {
		document
			.querySelectorAll('.vtbot-highlight')
			.forEach((el) => el.classList.remove('vtbot-highlight'));
		document
			.querySelectorAll('.vtbot-highlight-multiple')
			.forEach((el) => el.classList.remove('vtbot-highlight-multiple'));
		document
			.querySelectorAll('[data-vtbot-transition-name]')
			.forEach((el) => el.removeAttribute('data-vtbot-transition-name'));

		const els = elementsWithStyleProperty('view-transition-name');
		els.forEach((set, key) =>
			set.forEach((el) => {
				el.classList.add('vtbot-highlight');
				if (set.size > 1) el.classList.add('vtbot-highlight-multiple');
				(el as HTMLElement).dataset.vtbotTransitionName = key;
			})
		);
		return new Set(els.keys());
	}

	function freeze(n: number) {
		const colorScheme = currentColorScheme();
		const frame = document.createElement('iframe');
		frame.style.opacity = '0';
		frame.id = `vtbot-f${n}`;

		const transitions = markTransitions();
		const clone = document.documentElement.cloneNode(true) as HTMLHtmlElement;
		clone.querySelectorAll('script').forEach((s) => s.remove());
		clone.style.colorScheme = colorScheme;
		frame.srcdoc = clone.outerHTML.replace(
			'</head>',
			`<script type="module">${genInitCode()}${'<'}/script>
			<style>
        .vtbot-highlight {
            border: 2px solid #66aa6644;
            box-shadow: 1px 1px 2px 2px 66aa6644 inset;
            box-sizing: border-box;
            position: relative;
        }
        .vtbot-highlight.selected {
					background-color: #66aa6644;
        }
        .vtbot-highlight:hover {
            border: 2px solid green;
						box-shadow: 1px 1px 2px 2px #66aa6644;
						background-color: #66aa6644
        }
        .vtbot-highlight.vtbot-highlight-multiple {
            border: 2px solid darkred;
            box-shadow: 1px 1px 2px 2px red inset;
        }
        .vtbot-highlight.vtbot-highlight-multiple:hover {
            border: 2px solid red;
						box-shadow: 1px 1px 2px 2px lightred;
        }
        .vtbot-highlight:hover::before {
            content: attr(data-vtbot-transition-name);
            position: absolute;
						left: 20px;
						top:-12px;
						width:auto;
            background: white;
            color: black;
						border-radius: 8px;
            padding: 8px;
            border: 1px solid black;
						font-size: 24px;
            z-index: 2000;
        }
				* {
					cursor: not-allowed;
				}
				[data-vtbot-transition-name],[data-vtbot-transition-name] * {
					cursor: pointer;
				}
    </style><script type="module">${genScrollCode()}${'<'}/script></head>`
		);

		return { frame, transitions };
	}

	const currentColorScheme = () =>
		window.getComputedStyle(document.documentElement).colorScheme ||
		(window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');

	window.addEventListener('pageshow', () => {
		let leftFrame: HTMLIFrameElement;
		let rightFrame: HTMLIFrameElement;
		let leftTransitionNames: Set<string>;
		let rightTransitionNames: Set<string>;
		let panel: DocumentFragment;

		function afterPreparation() {
			const frozen = freeze(1);
			leftFrame = frozen.frame;
			leftTransitionNames = frozen.transitions;
		}
		function beforeSwap(e: TransitionBeforeSwapEvent) {
			e.viewTransition.updateCallbackDone.then(() => updateDone(e));
			//	e.viewTransition.finished.then(finished);
		}

		function updateDone(_e: TransitionBeforeSwapEvent) {
			const frozen = freeze(2);
			rightFrame = frozen.frame;
			rightTransitionNames = frozen.transitions;
			//e.viewTransition.skipTransition();
			/*
			const selectors = new Set<string>();
			walkSheets([...document.styleSheets], undefined, (rule: CSSStyleRule) => {
				if (rule.selectorText && rule.selectorText.includes('::view-transition')) {
					selectors.add(rule.selectorText);
				}
			});
			const sels = [...selectors].join(', ');
			console.log("sel",sels);
			*/
			const sel:string[] = [];
			leftTransitionNames.forEach((name) => {
				sel.push(`::view-transition-old(${name})`);
				if (rightTransitionNames.has(name)) {
					sel.push(`::view-transition-group(${name})`);
				}
			});
			rightTransitionNames.forEach((name) => sel.push(`::view-transition-new(${name})`));

			const style = document.createElement('style');
			document.head.appendChild(style);
			document.documentElement.style.setProperty('--vtbot-time', '0ms');
			style.outerHTML = `
	<style id="vtbot-x-brake">
		${sel.join(', ')} {
			animation-play-state: paused;
			animation-delay: var(--vtbot-time);
		}
	</style>`;
		}

		if (deriveCSSSelector.toString()[0]==='X') finished();

		async function finished() {
			const colorScheme = currentColorScheme();
			panel = makePanel(leftTransitionNames, rightTransitionNames)!;
			const animation = document.body.animate([{ opacity: 1 }, { opacity: 0 }], { duration: 150 });
			await animation.finished;
			document.documentElement.innerHTML = `<head/><body/>`;
			document.documentElement.style.colorScheme = colorScheme;

			document.head.appendChild(iFrameStyle());
			document.body.appendChild(leftFrame);
			document.body.appendChild(rightFrame);
			document.body.appendChild(panel);
			updateVisibility();
			initPanel();

			Promise.all([
				new Promise((resolve) => {
					leftFrame.onload = resolve;
				}),
				new Promise((resolve) => {
					rightFrame.onload = resolve;
				}),
			]).then(updateVisibility);
		}

		document.addEventListener(TRANSITION_AFTER_PREPARATION, afterPreparation);
		document.addEventListener(TRANSITION_BEFORE_SWAP, beforeSwap);
		window.addEventListener('resize', updateVisibility);

		window.addEventListener('message', (e) => {
			if (e.data.type === 'click') {
				leftFrame.contentWindow?.postMessage(e.data, '*');
				rightFrame.contentWindow?.postMessage(e.data, '*');
				const lis = document.querySelectorAll<HTMLLIElement>('#vtbot-ui-names li');
				let selected: HTMLLIElement | undefined;
				const name = e.data.name;
				lis.forEach((li) => {
					if (li.innerText === name) {
						li.classList.add('selected');
						selected = li;
						if (li.style.display === 'none') reset();
					} else {
						li.classList.remove('selected');
					}
				});
				const left = leftFrame.contentDocument?.querySelector<HTMLElement>(
					`[data-vtbot-transition-name="${name}"]`
				);
				const right = rightFrame.contentDocument?.querySelector<HTMLElement>(
					`[data-vtbot-transition-name="${name}"]`
				);
				scrollIntoView(left);
				scrollIntoView(right);
				selected &&
					selected.scrollIntoView({ behavior: 'instant', block: 'nearest', inline: 'nearest' });

				updateSelectors(left, right);
			}
		});

		function updateSelectors(
			left: HTMLElement | undefined | null,
			right: HTMLElement | undefined | null
		) {
			const selectors = document.querySelector<HTMLDivElement>('#vtbot-ui-selectors')!;
			const leftSelector = left && deriveCSSSelector(left);
			const rightSelector = right && deriveCSSSelector(right);

			selectors.children[0]!.className = '';
			selectors.children[3]!.className = '';
			left &&
				leftFrame.contentWindow &&
				selectors.children[0]!.classList.add(
					isElementVisible(leftFrame.contentWindow, left) ? 'visible' : 'invisible'
				);
			right &&
				rightFrame.contentWindow &&
				selectors.children[3]!.classList.add(
					isElementVisible(rightFrame.contentWindow, right) ? 'visible' : 'invisible'
				);

			(selectors.children[1] as HTMLParagraphElement).innerText = leftSelector || '(No element)';
			(selectors.children[4] as HTMLParagraphElement).innerText = rightSelector || '(No element)';
		}
		function updateVisibility() {
			document.querySelectorAll<HTMLLIElement>('#vtbot-ui-names li').forEach((li) => {
				const name = li.innerText;
				const classes = li.classList;

				classes.remove('leftHidden', 'rightHidden');
				classes.contains('left') && !visible(leftFrame, name) && classes.add('leftHidden');
				classes.contains('right') && !visible(rightFrame, name) && classes.add('rightHidden');
			});
		}

		function scrollIntoView(el: HTMLElement | null | undefined) {
			const glow = [
				// Keyframes
				{ boxShadow: '0 0 0px green' },
				{ boxShadow: '0 0 50px green' },
				{
					boxShadow: '0 0 100px green',
					display: 'inline-block',
					minWidth: '20px',
					minHeight: '20px',
					backgroundColor: 'lightgreen',
				},
				{ boxShadow: '0 0 50px green' },
				{ boxShadow: '0 0 0px   green' },
			];
			if (el) {
				el.scrollIntoView({ behavior: 'instant', block: 'nearest', inline: 'nearest' });
				const display = window.getComputedStyle(el).display;
				glow[2]!.display = display === 'inline' ? 'inline-block' : display;
				el.animate(glow, { duration: 1000, iterations: 1 });
			}
		}

		function makePanel(leftTransitionNames: Set<string>, rightTransitionNames: Set<string>) {
			const panel = document
				.querySelector<HTMLTemplateElement>('#vtbot-ui-panel-template')!
				.content.cloneNode(true) as DocumentFragment;
			panel.children[0]!.querySelectorAll('ol li').forEach((li) => li.remove());

			const list = panel.children[0]!.querySelector('ol')!;
			const names = [...new Set([...leftTransitionNames, ...rightTransitionNames])].sort();
			names.forEach((name) => {
				const li = document.createElement('li');
				li.innerText = name;
				if (leftTransitionNames.has(name)) {
					li.classList.add('left');
				}
				if (rightTransitionNames.has(name)) {
					li.classList.add('right');
				}
				list.appendChild(li);
			});
			return panel;
		}
	});

	function isElementVisible(window: Window, el: HTMLElement) {
		// Check if the element is hidden by CSS
		if (window.getComputedStyle(el).display === 'none') {
			return false;
		}

		// Check if the element has any width and height
		if (el.offsetWidth === 0 && el.offsetHeight === 0) {
			return false;
		}

		// Check if the element (or any of its parents) are hidden with visibility: hidden
		let currentElement: Element | null = el;
		while (currentElement) {
			if (window.getComputedStyle(currentElement).visibility === 'hidden') {
				return false;
			}
			currentElement = currentElement.parentElement;
		}

		// If none of the above conditions are met, the element is visible
		return true;
	}
	function visible(frame: HTMLIFrameElement, name: string) {
		const element = frame.contentDocument?.querySelector<HTMLElement>(
			`[data-vtbot-transition-name="${name}"]`
		);
		const window = frame.contentWindow;
		return element && window && isElementVisible(window, element);
	}
	function reset() {
		document.querySelector<HTMLInputElement>('#vtbot-ui-filter input[type="text"]')!.value = '';
		document.querySelector<HTMLInputElement>('#vtbot-ui-filter ul input')!.click();
		refreshNames();
	}

	function initPanel() {
		document.querySelector('#vtbot-ui-names ol')!.addEventListener('click', (e) => {
			if (e.target instanceof HTMLElement) {
				const targetLi = e.target.closest('li');
				if (targetLi) {
					postMessage({ type: 'click', name: targetLi.innerText });
				}
			}
		});
		document
			.querySelector<HTMLUListElement>('#vtbot-ui-filter ul')!
			.addEventListener('change', refreshNames);
		document
			.querySelector<HTMLUListElement>('#vtbot-ui-filter input[type="text"]')!
			.addEventListener('input', refreshNames);
		document
			.querySelector<HTMLButtonElement>('#vtbot-ui-filter button')!
			.addEventListener('click', reset);
	}

	function refreshNames() {
		const names = document.querySelectorAll<HTMLLIElement>('#vtbot-ui-names li');
		const filter = document
			.querySelector<HTMLInputElement>('#vtbot-ui-filter ul input:checked')!
			.id.replace('vtbot-c-', '');
		const fragment = document.querySelector<HTMLInputElement>(
			'#vtbot-ui-filter input[type="text"]'
		)!.value;
		names.forEach((name) => {
			const style = name.style;
			const classes = name.classList;
			style.display =
				(fragment === '' || name.innerText.includes(fragment)) &&
				(filter === 'all' ||
					(filter === 'both' && classes.contains('right') && classes.contains('left')) ||
					(filter === 'left' && classes.contains('left') && !classes.contains('right')) ||
					(filter === 'right' && classes.contains('right') && !classes.contains('left')))
					? 'list-item'
					: 'none';
		});
	}
	function iFrameStyle() {
		const style = document.createElement('style');
		style.textContent = `
	@keyframes shrink {
		from {
			transform: scale(0);
			opacity: 0;
		}
		to {
			transform: scale(0.5);
			height: calc(200vh - 400px);
			opacity: 1;
		}
	}
	@keyframes shrink2 {
		from {
			transform: scale(1) ;
			opacity: 0;
		}
		to {
			transform: scale(0.5) translateX(100%);
			height: calc(200vh - 400px);
			opacity: 1;
		}
	}
	iframe {
		margin:0;
		width: 100%;
		transform-origin: 0 0;
		height: 100vh;
		position: absolute;
		border: none;
		animation: shrink 0.5s both;
	}
	#vtbot-f2 {
		animation: shrink2 0.5s both;
	}
	body {
		margin: 0;
		display: flex;
	}
`;
		return style;
	}
</script>
