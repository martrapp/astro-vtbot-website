---
import VtBotDebug from 'astro-vtbot/components/VtBotDebug.astro';
import { getImage } from 'astro:assets';
import { ViewTransitions } from 'astro:transitions';
import outback from 'src/assets/outback.png';

const optimizedBackground = await getImage({ src: outback });
const vtbotBackgroundImage = `url(${optimizedBackground.src})`;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, minimum-scale=1, viewport-fit=cover" />
		<meta name="vtbot-ken" content="guru" />

		<link rel="icon" href="/favicon.svg" />
		<title>Ken Guru | Bag of Tricks</title>

		<VtBotDebug production />
		<ViewTransitions />
	</head>
	<body>
		<a href="" transition:name="Ken Guru">ðŸ¦˜</a>
		<div>
			<p>The interesting points in this demo are:</p>
			<ol>
				<li style="display: block">
					This demo consists of a single page. While the navigation to the same page does not
					trigger view transitions if the URL ends with a hash, it does if the URL does not contain
					a hash fragment.
					<br /><br />
					(Click on the kangaroo to see the transitions in action)
				</li><li style="display: none">
					As the page is already loaded, we do not need to load it again. The loader function in the

					<code>astro:before-preparation</code> event is overwritten with an empty function. Thus we
					do not load any HTML but just keep what we have.
				</li>
				<li style="display: none">
					The <code>swap</code> property of the <code>astro:before-swap</code> event is also overridden.
					In the new function, we just look for the kangaroo and nudge it a bit around. And it selects
					the next item to display from this list.
					<br /><br />
					On browsers that support view transitions, the kangaroo will smoothly transition to its new
					position. On others it will just jump around.
				</li>
			</ol>
		</div>
		<Fragment
			set:html={`<style>:root{--vtbot-background-image: ${vtbotBackgroundImage}}</style>`}
		/>
		<style is:global is:inline>
			body {
				background-image: var(--vtbot-background-image);
				background-size: 100vw 100vh;
				background-position: 0vw 0vh;
				font-family: sans-serif;
				font-size: 1rem;
				overflow: clip;
				width: 100vw;
				height: 100vh;
			}
			a {
				font-size: 6rem;
				position: absolute;
				transform: translate(50vw, 75vh);
				text-decoration: none;
			}
			div {
				background-color: #fff8;
				max-width: 67vw;
				padding: 1rem;
			}
		</style>
		<script>
			import {
				TRANSITION_BEFORE_PREPARATION,
				TRANSITION_BEFORE_SWAP,
				isTransitionBeforePreparationEvent,
				isTransitionBeforeSwapEvent,
			} from 'astro:transitions/client';

			const enabled = () => document.querySelector('meta[name="vtbot-ken"]');
			// We don't have to swap in a new document. We just nudge Kenny a bit around.
			let selected = 0;
			document.addEventListener(TRANSITION_BEFORE_SWAP, (event: Event) => {
				if (enabled() && isTransitionBeforeSwapEvent(event)) {
					event.swap = () => {
						++selected;
						const kenGuru = document.querySelector('a')!;
						const x = 5 + Math.random() * 90;
						const y = 60 + Math.random() * 20;
						const s = 0.5 + Math.random() * 1.5;
						kenGuru.style.transform = `translate(${x}vw,${y}vh) scale(${s})`;
						document.querySelectorAll('li').forEach((li, idx, arr) => {
							li.style.display = idx === selected % arr.length ? 'block' : 'none';
						});
						document.querySelector("[class*='astro-route-announcer']")?.remove();
					};
				}
			});
			// we can remove the default loader from processing as we manipulate the current document
			document.addEventListener(TRANSITION_BEFORE_PREPARATION, (event: Event) => {
				if (enabled() && isTransitionBeforePreparationEvent(event)) {
					event.loader = () => Promise.resolve();
				}
			});
		</script>
	</body>
</html>
