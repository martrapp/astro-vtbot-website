---
import MdxLayout from '../layouts/MdxLayout.astro';
import Card from '../components/Card.astro';
import { Content } from 'src/mdx/components.mdx';
---

<MdxLayout title="Reusable Components">
	<div transition:name="bot">
		<Content />
	</div>
	<ul role="list" class="link-card-grid">
		<Card
			href="/library/VtBotDebug/"
			title="VtBotDebug"
			icon="🐛"
			what="Debugging / ~2.6k Brotli bytes"
			name="vtbotdebug"
		>
			<p>
				<code>VtBotDebug</code> is a component that helps to understand transition events. It logs the
				events, their properties, and the overall timing during the processing to the browser console.
			</p>

			<h3>Status</h3><p>Feature complete for the logging part and ready to use.</p>
			<h3>Future direction</h3><ul>
				<li>Fix bugs and extend functionality</li>
			</ul>
		</Card>

		<Card
			href="/library/Linter/"
			title="Linter"
			icon="🧹"
			what="Debugging / ~2k Brotli bytes"
			name="linter"
		>
			This component checks for typical problems during development of view transitions and gives
			detailed error messages. The main checks are <ul>
				<li>Whether transition names are unique on a page</li><li>
					Whether nested elements are annotated with transition:persist
				</li>
			</ul>
			<h3>Status</h3><p>Ready to use</p>
			<h3>Future direction</h3><ul>
				<li>Add additional checks for typical issues.</li>
			</ul>
		</Card>

		<Card
			href="/library/LoadingIndicator/"
			title="LoadingIndicator"
			icon="⏳"
			what="Feature / ~ 0.6k Brotli bytes"
			name="loading"
		>
			<p>
				Have you often wondered if the app has noticed the click in apps that use view transitions?
				Or have you ever been annoyed and clicked on a link several times because nothing seemed to
				happen?
			</p><p>
				Then you need an indicator that gives you visual feedback that the app has responded: The
				loading indicator!
			</p>
			<h3>Status</h3><p>Base functionality and default behavior released.</p>
			<h3>Future direction</h3>
			<ul>
				<li>
					Offer "Custom loading indicators" to support different styles and as examples for further
					custom contributions
				</li>
			</ul>
		</Card>

		<Card
			href="/library/AnimationStyle/"
			title="AnimationStyle"
			icon="✨"
			what="Animation / < 0.1k Brotli bytes"
			name="animstyle"
		>
			<p>
				This is a component that can generate style sheets for view transition animations. This
				works for native view transitions and for Astro's view transition simulation for browsers
				that do not support them natively.
			</p><p>
				This component is used together with the functions offered by <code>animation-style.ts</code
				>
			</p>
			<h3>Status</h3><p>Used as part of the <code>Zoom</code> and <code>Swing</code> components.</p>
			<h3>Future direction</h3><ul>
				<li>Add more utility functions</li>
			</ul>
		</Card>

		<Card
			href="/library/Zoom/"
			title="Zoom"
			icon="🔎🔍"
			what="Animation / < 0.5k Brotli bytes"
			name="zoom"
		>
			<p>
				<code>Zoom</code> offers animation effects for view transitions. It can be used as a replacement
				for the standard Astro animations <code>fade()</code> and <code>slide()</code>.
			</p><p>
				Zoom animations can enlarge the current transition group or shrink it to a point. And the
				zooming can be combined with a fade effect.
			</p>
			<h3>Status</h3><p>Ready to use, see demos.</p>
			<h3>Future direction</h3><ul>
				<li>Harden implementation</li>
			</ul>
		</Card>

		<Card
			href="/library/Swing/"
			title="Swing"
			icon="🎷"
			what="Animation / < 0.5k Brotli bytes"
			name="swing"
		>
			<p>
				<code>Swing</code> offers animation effects similar to <code>Zoom</code>. The effects allow
				rotations around all axis in 3D space.
			</p>
			<p>
				The effect can be used as a drop-in replacement for <code>fade()</code> and <code
					>slide()</code
				>
				but also offers extensive parameters for configuration.
			</p>
			<h3>Status</h3>

			<p>Ready to use, see demos!</p>

			<h3>Future direction</h3><ul>
				<li>Show more parametrizations in demos</li>
			</ul>
		</Card>

		<Card
			href="/library/ReplacementSwap/"
			title="ReplacementSwap"
			icon="↹"
			iconStyle="color: darkorange"
			what="Feature / < 0.5k Brotli bytes"
			name="replswap"
		>
			<p>
				The <code>ReplacementSwap</code> component solves the problem that view transitions lose the
				content of <i>persisted</i> iframes and the state of animations on transtions.
			</p><p>
				The component changes how the new page replaces the old page during view transitions. It
				only replaces the parts that are marked for replacement. Hence the name.
			</p>
			<h3>Status</h3><p>Just got a new property!</p>
			<h3>Future direction</h3><ul>
				<li>Find and resolve potential bugs.</li>
			</ul>
		</Card>

		<Card
			href="/library/Portal/"
			title="Portal"
			icon="🚪"
			what="Feature / < 0.3k Brotli bytes"
			name="portal"
		>
			<p>
				The <code>Portal</code> forces all navigations through a single intermediate page. This page
				can be used to show some loading animation. The transition automatically resumes to the target
				page of the transition once that page is loaded.
			</p><p>
				The benefit of a portal page is that the animation effect can be confined on that very page.
				A limitation compared to *pure* view transitions is that presisted elements and transition
				groups from the current page to the target page are only possible if those are also
				supported by the portal page.
			</p>
			<h3>Status</h3><p>Not bulletproof yet.</p>
			<h3>Future direction</h3><ul>
				<li>Add properties for more fine grained contol</li>
			</ul>
		</Card>

		<Card
			href="/library/NoScroll/"
			title="NoScroll"
			icon="📜"
			what="Utility / < 0.1k Brotli bytes"
			name="noscroll"
		>
			<p>Sometimes you want to opt out of the default scroll behavior of navigation.</p><p></p> Putting
			the <code>&lt;NoScroll&gt;</code> component in the <code>&lt;head&gt;</code> of your page prevents
			scrolling on transitions. The vertical and horizontal scroll positions just stay where the were
			before you clicked a link.

			<h3>Status</h3><p>Brand new.</p>
			<h3>Future direction</h3><ul>
				<li>Do we need properties for more fine grained contol?</li>
			</ul>
		</Card>

		<Card
			href="/library/BrakePad/"
			title="BrakePad"
			icon="🦥"
			what="Utility / < 0.1k Brotli bytes"
			name="brakepad"
		>
			<p>
				As a developer, you want to define and control how your website behaves on slow connections.
				The <code>&lt;BrakePad&gt;</code> component gives you control over when and how to simulate slow
				loading. By default, the brake pad is a DEV mode only feature.
			</p><p>
				But you can also switch it active for production if you want to force some delay during view
				transitions. Admittedly, you typically want transitions to be slick and snappy. So this is a
				bit of a niche feature, but it can be very helpful for testing and debugging.
			</p>
			<h3>Status</h3><p>New but reliable</p>
			<h3>Future direction</h3><ul>
				<li>Do we need additional properties for more fine grained contol?</li>
			</ul>
		</Card>
	</ul>
</MdxLayout>

<style is:global>
	:root {
		--accent: 135, 206, 235;
		--accent-gradient: linear-gradient(330deg, #000, rgb(135, 206, 235));
	}
	html {
		font-family: sans-serif;
		background: linear-gradient(330deg, #000, rgb(13, 20, 23));
	}
	::view-transition-new(*) {
		animation: none;
	}
	::view-transition-group(root) {
		animation: none;
	}
	::view-transition-old(root) {
		animation: none;
	}
	html body {
		max-width: 90%;
	}
</style>

<style>
	code {
		font-size: 1rem;
		font-family: monospace;
	}
	p {
		hyphens: auto;
		margin-bottom: 0.5em;
		margin-top: 0;
	}
	ul {
		padding-inline-start: 2ex;
	}
	h3 {
		margin-top: 1em;
		margin-bottom: 0.25em;
	}
	main {
		margin: auto;
		padding: 1.5rem;
		max-width: 80vw;
	}

	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(36ch, 1fr));
		gap: 1rem;
		padding: 0;
		animation: slideup 0.25s ease-in-out;
	}
	@keyframes slideup {
		from {
			transform: translateY(30vh);
			opacity: 0;
		}
	}
</style>
