---
import { getImage } from 'astro:assets';
import fishies from 'src/assets/fish.png';
import VtBotDebug from '~/components/VtBotDebug.astro';
import Layout from './Layout.astro';
import type { TransitionDirectionalAnimations } from 'astro';
import { adapter } from '~/animations/animation-style';

interface Props {
	title: string;
}
const { title } = Astro.props;
const optimizedBackground = await getImage({ src: fishies });
const vtbotBackgroundImage = `url(${optimizedBackground.src})`;

const south = {
	old: {
		name: 'translateToNorth',
		duration: '2s',
		easing: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
	},
	new: {
		name: 'translateFromSouth',
		duration: '2s',
		easing: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
	},
};
const north = {
	old: {
		name: 'translateToSouth',
		duration: '2s',
		easing: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
	},
	new: {
		name: 'translateFromNorth',
		duration: '2s',
		easing: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
	},
};
const east = {
	old: {
		name: 'translateToWest',
		duration: '2s',
		easing: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
	},
	new: {
		name: 'translateFromEast',
		duration: '2s',
		easing: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
	},
};

const west = {
	old: {
		name: 'translateToEast',
		duration: '2s',
		easing: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
	},
	new: {
		name: 'translateFromWest',
		duration: '2s',
		easing: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
	},
};
const pond = {south, north, east, west};
---

<Layout title={title} background="rgb(85, 167, 238)">
	<VtBotDebug production slot="head" />
	<div transition:persist="bg" id="bg"></div>
	<main transition:animate={adapter(pond)}>
		<div class="info">Open browser console to see debug info</div>
		<slot />
	</main>
</Layout>

<style is:inline set:text={`:root{--vtbot-background-image: ${vtbotBackgroundImage}}`}></style>

<style is:inline>
	.info {
		font-size: min(4vw,4vh);
		position: sticky;
		top: 10vh;
		left: 10vw;
		max-width: fit-content;
		background: darkcyan;
		color: antiquewhite;
		padding:0.5em;
		border: 3px solid darkgreen;
	}
	:root {
		font-family: sans-serif;
	}
	a {
		font-size: min(10vw,10vh);
		color: white;
	}
	.nav {
		display: flex;
		justify-content: space-between;
	}
	#bg {
		background-image: var(--vtbot-background-image);
		position: absolute;
		height: 100vh;
		width: 100vw;
		background-size: 100vw 100vh;
		background-position: 0vw 0vh;
		margin: 0;
		padding: 0;
		top: 0;
		left: 0;
		z-index: -1;
	}

	[data-astro-transition='north'] #bg {
		animation: bgFromNorth 2s linear;
	}
	[data-astro-transition='south'] #bg {
		animation: bgFromSouth 2s linear;
	}
	[data-astro-transition='west'] #bg {
		animation: bgFromWest 2s linear;
	}
	[data-astro-transition='east'] #bg {
		animation: bgFromEast 2s linear;
	}

	::view-transition-image-pair(root) {
		isolation: auto;
	}

	::view-transition-old(root),
	::view-transition-new(root) {
		animation: none;
		mix-blend-mode: normal;
	}
	h1 {
		font-size: min(8vw,8vh);
		margin-top: 2em;
		color: lightseagreen;
		text-align: center;
		text-shadow:
			-2px -2px black,
			-2px 2px black,
			2px -2px black,
			2px 2px black;
	}
	@keyframes translateFromSouth {
		from {
			transform: translate(0, 100vh);
		}
		to {
			transform: translate(0, 0);
		}
	}
	@keyframes translateFromNorth {
		from {
			transform: translate(0, -100vh);
		}
		to {
			transform: translate(0, 0);
		}
	}
	@keyframes translateFromWest {
		from {
			transform: translate(-100vw, 0);
		}
		to {
			transform: translate(0, 0);
		}
	}
	@keyframes translateFromEast {
		from {
			transform: translate(100vw, 0);
		}
		to {
			transform: translate(0, 0);
		}
	}
	@keyframes translateToSouth {
		from {
			transform: translate(0, 0);
		}
		to {
			transform: translate(0, 100vh);
		}
	}
	@keyframes translateToNorth {
		from {
			transform: translate(0, 0);
		}
		to {
			transform: translate(0, -100vh);
		}
	}
	@keyframes translateToWest {
		from {
			transform: translate(0, 0);
		}
		to {
			transform: translate(-100vw, 0);
		}
	}
	@keyframes translateToEast {
		from {
			transform: translate(0, 0);
		}
		to {
			transform: translate(100vw, 0);
		}
	}

	@keyframes bgFromSouth {
		from {
			background-position: 0vw 100vh;
		}
		to {
			background-position: 0vw 0vh;
		}
	}
	@keyframes bgFromNorth {
		from {
			background-position: 0vw -100vh;
		}
		to {
			background-position: 0vw 0vh;
		}
	}
	@keyframes bgFromWest {
		from {
			background-position: -100vw 0vh;
		}
		to {
			background-position: 0vw 0vh;
		}
	}
	@keyframes bgFromEast {
		from {
			background-position: 100vw 0vh;
		}
		to {
			background-position: 0vw 0vh;
		}
	}
</style>

<style is:global>
	html {
		overflow: hidden
	}
</style>
<script>
	import {
		TRANSITION_BEFORE_PREPARATION,
		isTransitionBeforePreparationEvent,
	} from 'astro:transitions/client';
	const FISHPOND = '/fish-pond/';
	document.addEventListener(TRANSITION_BEFORE_PREPARATION, beforePreparation);

	function beforePreparation(e: Event) {
		if (isTransitionBeforePreparationEvent(e) && e.to.pathname.startsWith(FISHPOND)) {
			let newDir = dir(e.from.pathname, e.to.pathname);
			e.direction = newDir;
		}
	}
	function dir(from: string, to: string) {
		return from.includes('/center/')
			? to.replace(/\/fish-pond\/(.+)\//, '$1')
			: negate(from.replace(/\/fish-pond\/(.+)\//, '$1'));
	}
	function negate(dir: string) {
		return dir === 'north' ? 'south' : dir === 'east' ? 'west' : dir === 'south' ? 'north' : 'east';
	}
</script>
